1)Скачать само ядро: https://www.kernel.org/ (последнее стабильное)
Сохранить в любое место и разархивировать.

2)Скачать патч для поддержки своего процессора(если вам нужен конкретный процессор): https://github.com/graysky2/kernel_gcc_patch
Сохранить и разархивировать.

3)Перед сборкой ядра нужно убрать все зависимости!(Конкретно у меня процессор Xeon E3-1230 v3, как будет на процессорах AMD не знаю :(  )
sudo apt install build-essential make libc-dev libc6-dev gcc g++ dpkg-dev bc fakeroot libncurses5-dev libssl-dev git

4)Далее переходим в папку с ядром и открываем там терминал и прописываем:
make menuconfig

Делаем изменения которые ВАМ нужны. Сохраняем изменения и выходим.

5)Если вашего процессора не было в списке,то ставим патч:
patch -p1 < "путь к патчу без ковычек"

6) Повторяем пункт 4,чтобы выбрать ваш процессор.Сохраняем, выходим.

7)Открываем файл .config с помощью ЛЮБОГО текстового редактора,нажимаем CTRL+F и пишем CONFIG_DEBUG_INFO,после знака = ставим n,чтобы не видеть лишней дебаг информации,если она вам нужна,то этот пункт можно пропустить.Сохраняем, закрываем.

8)Далее в консоле пишем:
make localmodconfig

Он начнёт спрашивать всякое,можно не вдаваться в подробности и просто жать ENTER.

9)Всё. Можно начинать сборку ядра:
make -j8 bindeb-pkg

где -j8 это количество ядер компьютера,т.е. если у вас 4,то вместо 8 напишите 4.

10)Ждём окончания операции(примерно 10-15 минут)

11)Появятся .deb файлы, которые нужно установить. После установки перезагружаем компьютер и он загрузится в новое ядро.


Шаг 1: Установка необходимых инструментов
Нам понадобятся компилятор, утилиты для сборки и некоторые библиотеки. Большинство из них входят в группу base-devel.
Откройте терминал и выполните:
Generated bash
sudo pacman -Syu base-devel bc libelf ncurses xmlto
Use code with caution.
Bash
base-devel: Содержит make, gcc и другие основные инструменты.
bc, libelf, ncurses, xmlto: Необходимы для скриптов сборки и конфигурации ядра (например, для menuconfig).
Шаг 2: Получение исходного кода ядра
Есть два хороших способа, но для Arch Linux я настоятельно рекомендую второй.
Способ А (Универсальный): Скачать "чистое" ядро с официального сайта kernel.org.
Способ Б (Рекомендуемый для Arch): Использовать исходный код, который использует сам Arch Linux. Это лучше, так как он уже содержит патчи, специфичные для Arch, и готовую конфигурацию.
Мы пойдем по Способу Б.
Установите asp — инструмент для доступа к дереву исходных кодов Arch.
Generated bash
sudo pacman -S asp
Use code with caution.
Bash
Загрузите исходники для текущего ядра linux.
Generated bash
asp update linux
asp export linux
Use code with caution.
Bash
Это создаст директорию linux в вашем текущем каталоге.
Перейдите в эту директорию.
Generated bash
cd linux
Use code with caution.
Bash
Внутри вы увидите файл PKGBUILD и другие файлы, включая патчи.
Шаг 3: Конфигурация ядра — Самый важный этап
Здесь вы определяете, какие функции, драйверы и опции будут в вашем ядре.
Начните с существующей конфигурации. Это золотое правило. Мы скопируем конфиг вашего текущего, работающего ядра. Это гарантирует, что мы не отключим случайно что-то важное (например, драйвер для вашего диска или файловой системы).
Generated bash
# Копируем конфиг текущего ядра
cp /proc/config.gz .
gunzip config.gz
mv config .config
Use code with caution.
Bash
Теперь в директории linux лежит файл .config — основа для нашей сборки.
Запустите интерактивный конфигуратор. Самый популярный — menuconfig.
Generated bash
make menuconfig
Use code with caution.
Bash
Вы увидите текстовый интерфейс.
Навигация: Стрелки вверх/вниз. Enter для входа в подменю. Esc дважды для выхода.
Поиск: Нажмите / и введите ключевое слово (например, btrfs или amd), чтобы найти нужную опцию.
Выбор опций: Клавиша Пробел переключает состояние:
[ ] — опция выключена.
[M] — опция будет скомпилирована как модуль (рекомендуется для большинства драйверов). Модули загружаются по мере необходимости.
[*] — опция будет встроена прямо в ядро. Используется для критически важных вещей, например, драйвера файловой системы вашего корневого раздела.
Помощь: Выберите опцию и нажмите h (help).
Внесите необходимые вам изменения. Например, если вы хотите включить поддержку файловой системы ZFS, вы найдете ее в File systems ---> и отметите как модуль [M]. Если вы хотите включить специфичный планировщик или опцию безопасности, найдите ее и включите.
Совет для продвинутых: Если вы хотите создать минималистичное ядро только для вашего текущего оборудования, можете запустить make localmodconfig. Он автоматически отключит все модули для устройств, которые не подключены в данный момент. Внимание: если вы потом подключите новую USB-флешку или веб-камеру, драйвера для нее может не оказаться. Для первого раза лучше придерживаться стандартной конфигурации.
Сохраните и выйдите. После внесения всех изменений выберите < Save >, подтвердите имя файла .config и затем выберите < Exit >.
Шаг 4: Сборка ядра и модулей
Этот процесс займет много времени — от 15 минут до нескольких часов, в зависимости от мощности вашего процессора.
Запустите компиляцию, используя все доступные ядра вашего процессора:
Generated bash
make -j$(nproc)
Use code with caution.
Bash
-j$(nproc) — автоматически подставляет количество ваших процессорных потоков для ускорения сборки.
Просто ждите завершения. Если на этом этапе возникли ошибки, чаще всего они связаны с неправильной конфигурацией на шаге 3 (например, включение опции без ее зависимостей).
Шаг 5: Установка ядра и модулей
Теперь, когда ядро скомпилировано, его нужно правильно установить в систему.
Установка модулей:
Generated bash
sudo make modules_install
Use code with caution.
Bash
Эта команда скопирует все скомпилированные модули (файлы .ko) в директорию /lib/modules/ИМЯ_ВАШЕГО_ЯДРА/.
Копирование образа ядра:
Скопируем главный файл ядра в директорию /boot. Важно дать ему уникальное имя, чтобы не затереть стандартное ядро.
Generated bash
# Имя vmlinuz-linux-custom - просто пример. Можете назвать его vmlinuz-linux-mymod
sudo cp arch/x86/boot/bzImage /boot/vmlinuz-linux-custom
Use code with caution.
Bash
Шаг 6: Создание Initramfs
initramfs — это начальный образ в памяти, который содержит модули, необходимые для монтирования вашей корневой файловой системы. Для нового ядра нужно создать новый initramfs.
Создайте новый пресет для mkinitcpio (утилита Arch для создания initramfs).
Generated bash
# Открываем новый файл в текстовом редакторе
sudo nano /etc/mkinitcpio.d/linux-custom.preset
Use code with caution.
Bash
Вставьте в этот файл следующее содержимое:
Generated ini
# mkinitcpio preset file for the custom kernel

PRESETS=('default' 'fallback')

ALL_kver="/boot/vmlinuz-linux-custom"

default_image="/boot/initramfs-linux-custom.img"
fallback_image="/boot/initramfs-linux-custom-fallback.img"
fallback_options="-S autodetect"
Use code with caution.
Ini
Сохраните файл (Ctrl+O в nano) и выйдите (Ctrl+X).
ALL_kver указывает на наш новый образ ядра.
default_image и fallback_image — имена для создаваемых initramfs.
Сгенерируйте initramfs по этому пресету:
Generated bash
sudo mkinitcpio -p linux-custom
Use code with caution.
Bash
Шаг 7: Настройка загрузчика
Остался последний шаг — сказать вашему загрузчику (GRUB или systemd-boot) о новом ядре.
Если вы используете GRUB (самый частый случай):
GRUB автоматически найдет новое ядро. Просто обновите его конфигурацию:
Generated bash
sudo grub-mkconfig -o /boot/grub/grub.cfg
Use code with caution.
Bash
Вы должны увидеть в выводе, что он нашел vmlinuz-linux-custom и initramfs-linux-custom.img.
Если вы используете systemd-boot:
Вам нужно вручную создать файл конфигурации для новой записи.
Создайте файл: sudo nano /boot/loader/entries/arch-custom.conf
Вставьте и отредактируйте:
Generated code
title   Arch Linux (Custom Kernel)
linux   /vmlinuz-linux-custom
initrd  /initramfs-linux-custom.img
options root=UUID=ВАШ_UUID_КОРНЯ rw
Use code with caution.
ВАШ_UUID_КОРНЯ нужно заменить на UUID вашего корневого раздела. Узнать его можно командой lsblk -f.
Шаг 8: Перезагрузка и Проверка
Все готово!
Перезагрузите компьютер: reboot.
В меню загрузчика (GRUB или systemd-boot) вы увидите новый пункт, например, "Arch Linux (Custom Kernel)". Выберите его.
Если система успешно загрузилась, откройте терминал и проверьте версию ядра:
Generated bash
uname -r
Use code with caution.
Bash
Вы должны увидеть версию, соответствующую вашему скомпилированному ядру.
Поздравляю, вы успешно скомпилировали и загрузили свое собственное ядро в Arch Linux
