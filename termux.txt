# Цвета и элементы prompt
PS1='\[\e[1;33m\]\t \[\e[1;36m\]\w \[\e[1;35m\]\$ \[\e[0m\]'
# Цвета для ls
alias ls='ls --color=auto'
# Псевдонимы
alias update='pkg update && pkg upgrade'
alias clr='clear'
alias grep='grep --color=auto'

#Открытие  bashrc
alias ebashrc='nano ~/.bashrc && source ~/.bashrc'

bashrc() {
    # Определяем редактор (аргумент > переменная окружения > nano по умолчанию)
    local editor="${1:-${EDITOR:-nano}}"

    # Проверяем доступность редактора
    if ! command -v "$editor" &>/dev/null; then
        echo -e "\033[1;31mОшибка:\033[0m редактор '$editor' не найден. Попробуйте:"
        echo -e "  nano, vim, micro, code, geany"
        echo -e "Или установите: \033[1mpkg install ${editor}\033[0m"
        return 1
    fi

    # Специальные флаги для GUI-редакторов
    case "$editor" in
        "code") editor="code -w" ;;    # VS Code (ожидает закрытия)
        "gedit") editor="gedit -s" ;;  # GNOME Editor
        "subl") editor="subl -n -w" ;; # Sublime Text
    esac

    # Открываем .bashrc
    if "$editor" ~/.bashrc; then
        # Перезагружаем конфиг с проверкой синтаксиса
        if ! source ~/.bashrc; then
            echo -e "\033[1;33mВнимание:\033[0m ошибка в .bashrc! Проверьте синтаксис."
            return 2
        fi
        echo -e "\033[1;32mУспешно:\033[0m .bashrc перезагружен"
    else
        echo -e "\033[1;31mОшибка:\033[0m не удалось открыть редактор"
        return 3
    fi
}

# Автодополнение для редакторов
_bashrc_complete() {
    local editors=(nano vim micro code gedit subl)
    mapfile -t COMPREPLY < <(compgen -W "${editors[*]}" – "${COMP_WORDS[1]}")
}
complete -F _bashrc_complete bashrc

#Генератор паролей
genpass() {
    # Устанавливаем длину пароля (по умолчанию 8)
    local length="${1:-8}"

    # Проверка что аргумент - положительное число
    if ! [[ "$length" =~ ^[0-9]+$ ]] || [ "$length" -lt 1 ]; then
        echo -e "\033[1;31mОшибка:\033[0m длина должна быть числом > 0"
        echo "Использование: genpass [длина]"
        echo "Пример: genpass 12"
        return 1
    fi

    # Набор символов
    local chars='A-Za-z0-9!@#$%^&*()_+-=[]{}|;:,.<>?~'

    # Генерация пароля
    local password=$(tr -dc "$chars" < /dev/urandom | head -c "$length")

    # Вывод пароля
    echo -e "\033[1;32mПароль:\033[0m $password"

    # Копирование в буфер обмена (для Termux)
    if command -v termux-clipboard-set &>/dev/null; then
        echo -n "$password" | termux-clipboard-set
        echo -e "\033[1;36mСкопировано в буфер!\033[0m"
    else
        echo -e "\033[1;33mПодсказка:\033[0m установите Termux:API для копирования в буфер"
        echo "pkg install termux-api"
    fi
}